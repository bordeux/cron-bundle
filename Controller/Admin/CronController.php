<?php

namespace Bordeux\Bundle\CronBundle\Controller\Admin;

use Bordeux\Bundle\CronBundle\Entity\Cron;
use Sonata\AdminBundle\Controller\CRUDController;
use Symfony\Component\HttpFoundation\RedirectResponse;


/**
 * Class CronController
 * @author Chris Bednarczyk <chris@tourradar.com>
 * @package Bordeux\Bundle\CronBundle\Controller
 */
class CronController extends CRUDController
{

    /**
     * @param null $id
     * @return RedirectResponse
     * @author Chris Bednarczyk <chris@tourradar.com>
     */
    public function logsAction($id = null)
    {

        $id = $this->getRequest()->get($this->admin->getIdParameter());
        $url = $this->admin->generateUrl("bordeux.cron.sonata.cron.log.list", [
            'id' => $id
        ]);

        return new RedirectResponse($url);
    }


    /**
     * @param null $id
     * @return RedirectResponse
     * @author Chris Bednarczyk <chris@tourradar.com>
     */
    public function killAction($id = null)
    {
        /** @var Cron $cron */
        $cron = $this->admin->getSubject();



        if ($cron->isRunning()) {
            $em = $this->get("doctrine.orm.entity_manager");
            exec("kill {$cron->getPid()}");
            $cron->setPid(null);
            $cron->setRunning(false);
            $em->flush($cron);
            $this->getRequest()
                ->getSession()
                ->getFlashBag()
                ->add("success", "Successful killed {$cron->getName()}");
        }else{
            $this->getRequest()
                ->getSession()
                ->getFlashBag()
                ->add("warning", "Unable to kill {$cron->getName()}, process is not running");
        }



        return new RedirectResponse($this->admin->generateUrl('list'));
    }

    /**
     * @param null $id
     * @return RedirectResponse
     * @author Chris Bednarczyk <chris@tourradar.com>
     */
    public function runAction($id = null)
    {
        /** @var Cron $cron */
        $cron = $this->admin->getSubject();

        $em = $this->get("doctrine.orm.entity_manager");
        $cron->setNextRunDate(new \DateTime("1993-06-11"));
        $em->flush();

        $this->getRequest()
            ->getSession()
            ->getFlashBag()
            ->add("success", "Cron {$cron->getName()} added to queue with high priority");


        return new RedirectResponse($this->admin->generateUrl('list'));
    }

    public function showAction($id = null)
    {
        return parent::editAction($id); // TODO: Change the autogenerated stub
    }


}
